#! /bin/sh
#  -*- Mode: Shell-script -*-
# for.test --- test functionality of `for' function
#
# Time-stamp:        "2004-10-01 19:47:50 bkorb"
# Author:            Bruce Korb <bkorb@gnu.org>
# Maintainer:        Bruce Korb <bkorb@gnu.org>
# Created:           Fri Oct 1 10:27:31 PDT 1999
# Last Modified:     $Date: 2004/10/30 20:43:56 $
#            by: bkorb
#
# $Id: for.test,v 3.3 2004/10/30 20:43:56 bkorb Exp $
# ----------------------------------------------------------------------

# Common definitions
if test -z "$srcdir"; then
    srcdir=`dirname $0`
    test "${VERBOSE+set}" != set && VERBOSE=1
fi
. $srcdir/defs

# # # # # # # # # # TEMPLATE FILE # # # # # # # # #

echo creating $testname.tpl
cat > $testname.tpl <<_EOF_
<= AutoGen5 template test =>
<=
FOR list ",\n" =><=
  IF (first-for?)
     =>FIRST:  <=
  ELIF (last-for?)
     =>LAST:   <=
  ELSE
     =>MIDDLE: <=
  ENDIF =><=elt[0]=><=
ENDFOR =>
<=
FOR list-2        =><=
  FOR list ", "
    =><=bumble    =><=
  ENDFOR          =><=
ENDFOR            =>
<=
FOR list  ",\n"   =><=
  FOR list-2
    =><=(for-index "list")=>:  <=

      IF (first-for? "list")
         =>FIRST  <=
      ELIF (last-for? "list")
         =>LAST   <=
      ELSE
         =>MIDDLE <=
      ENDIF       =><=

      (tpl-file-line " on line %2\$d") =><=

  ENDFOR          =><=
ENDFOR            =>
_EOF_


# Create the files we need in the test environment
cat > $testname.def <<_EOF_
AutoGen definitions $testname;
list = { elt = one; },
{ elt = two.one, two.two, two.three; };
list = { elt = three; }, {elt = four;};

list-2 = { bumble = mumble; };
_EOF_

# this is the output we should expect to see
cat > $testname.sample <<_EOF_
FIRST:  one,
MIDDLE: two.one,
MIDDLE: three,
LAST:   four
mumble, mumble, mumble, mumble
0:  FIRST   on line 31,
1:  MIDDLE  on line 31,
2:  MIDDLE  on line 31,
3:  LAST    on line 31
_EOF_

${AGexe} $testname.def || failure AutoGen failed
cmp -s $testname.test $testname.sample || \
    failure "`diff -c $testname.test $testname.sample`"

echo '<= FOR =><= ENDFOR =>' >> $testname.tpl
f=`(${AGexe} $testname.def 2>&1) | egrep 'requires iterator'`
test -z "$f" && \
  failure "failed to detect missing FOR iterator"

cleanup
# end of for.test
