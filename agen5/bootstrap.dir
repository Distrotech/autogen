#! /bin/sh
#
# ----------------------------------------------------------------------
# config/bootstrap.dir --- maintainer's bootstrap script
#
# Author:            Bruce Korb <bkorb@gnu.org>
# Maintainer:        Bruce Korb <bkorb@gnu.org>
# Created:           Thu Jul 29 09:32:11 1999
# Last Modified:     $Date: 2000/09/27 17:22:53 $
#            by:     Bruce Korb <bkorb@gnu.org>
# ----------------------------------------------------------------------
# @(#) $Id: bootstrap.dir,v 1.31 2000/09/27 17:22:53 bkorb Exp $
# ----------------------------------------------------------------------

#  This script rebuilds sources not kept in the CVS repository.
#  These files are distributed, so it is not necessary to invoke
#  AutoGen before building AutoGen.  (Like I had to do long ago :)

#  "make" will invoke this file with the name of the desired output
#  as an argument.  We do this here rather than in the make file
#  because some of the rules are complex and we don't want to
#  deal with the dual update problem.

#  Dump the bootstrap recursive argument.  We're not interested.
#
if [ "$1" = recursive ]
then
    shift
fi

#  Check for a "force" option
#
if [ "$1" = "-f" ]
then force=true  ; shift
else force=false ; fi

#  Make sure we have a default for top build and source.
#  Some of the templates need this information.
#
top_srcdir=${top_srcdir:-..}
top_builddir=${top_builddir:-..}
srcdir=${srcdir:-.}
builddir=${builddir:-.}

export top_builddir top_srcdir builddir srcdir

#  disable any $HOME defaults
#
HOME=/dev/null

if [ -z "${DEBUG_OPTS}" ]
then
  if egrep 'define DEBUG' opts.h > /dev/null 2>&1
  then
    DEBUG_OPTS=-DDEBUG=1
    AUTOGEN_DEBUG=DEBUG=1
    export AUTOGEN_DEBUG
  else
    DEBUG_OPTS=-UDEBUG
    unset AUTOGEN_DEBUG
  fi

else
  AUTOGEN_DEBUG=`echo " ${DEBUG_OPTS}" | sed 's/ -D/ /g'`
  export AUTOGEN_DEBUG
fi

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# For the following to work, we must temporarily find or install
# autogen, columns and getdefs from wherever they are found:
#
rmlist=

#  Name our executable in one place and disable any $HOME defaults
#  Use the local ${AG}, if available.  Otherwise, look for it.
#
AUTOGEN=${AUTOGEN-autogen}
AG=${builddir}/autogen

if test -f ${AG}
then
  if test -x ${AG}
  then :
  else AG=""
  fi
else AG=""
fi

if test -z "${AG}"
then
  f=`type ${AUTOGEN} | sed -e "s;${AUTOGEN} is [^/]*/;/;" `

  case ${f} in
  */autogen )
     AG=${f}
     ;;

  * )
    AG=""
    ;;
  esac
fi
echo "autogen is '${AG}'"

#  The "getdefs" and "columns" programs are specifically
#  called out in some of the templates (ensuring that
#  they are the ones shipped with the current package)
#
GD=../getdefs/getdefs
if [ ! -x ${GD} ]
then
  f=`type getdefs | sed "s,getdefs is [^/]*/,/," `
  case ${f} in
  */getdefs )
     ln -s ${f} ${GD}
     rmlist="$rmlist ${GD}"
     ;;

  * )
    GD=""
    test "X${BOOTSTRAP}" = X \
      && echo "Cannot locate GD (GDEXE=${GDEXE}, GD=${GD}).  Giving up"
    exit 1
    ;;
  esac
fi 2>/dev/null

COL=../columns/columns
if [ ! -x ${COL} ]
then
  f=`type columns | sed "s,columns is [^/]*/,/," `
  case ${f} in
  */columns )
     ln -s ${f} ${COL}
     rmlist="$rmlist ${COL}"
     ;;
  esac
fi 2>/dev/null

# # # # # # # # # # # # # # # # # # # # # # #
#
#  IF we have no remaining argument, then do everything unbuilt
#
if [ $# -eq 0 ]
then
  echo Looking in ${top_srcdir}/agen5/Makefile.am for GEN-RULE
  set -- `egrep '##.*GEN-RULE' ${top_srcdir}/agen5/Makefile.am | \
          sed 's/.*## *\(.*\) GEN-RULE/\1/' `
  if $force ; then :
  else
    t=""
    for f
    do if [ ! -f $f ]
       then
         echo "Bootstrapping $f"
         t="$t $f"
       fi
    done
    set -- $t
  fi
fi

#  Ensure complete success or a noticable failure
#
set -e

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#  FOR each output target,
#   DO the appropriate rule...
#
for t
do
  echo Re-building "$t"
  case "$t" in
  defParse.[ch] )
    #  Set a default for YACC
    #
    if [ "x${YACC}" = x ]
    then
      f="`type byacc 2>/dev/null`"

      case "${f}" in
      "byacc is "* )
        YACC="byacc -d"
        ;;

      * )
        f="`type yacc 2>/dev/null`"

        case "${f}" in
        "yacc is "* )
          YACC="yacc -d"
          ;;

        * )
          echo "NO WORKABLE yacc"
          exit 1
          ;;
        esac
        ;;
      esac
    fi

    echo YACC: ${YACC} defParse.y
    ${YACC} defParse.y
    rm -f defParse.c defParse.h
    if test -f y.out.c; then
      mv -f y.out.c defParse.c
      mv -f y.out.h defParse.h
    elif test -f y.tab.c; then
      mv -f y.tab.c defParse.c
      mv -f y.tab.h defParse.h
    elif test -f y_tab.c; then
      mv -f y_tab.c defParse.c
      mv -f y_tab.h defParse.h
    fi
    ;;

  stamp-opts | \
  opts.[ch] )
    # Make the option processing files:
    #
    if [ -z "${AG}" ]
    then
      test "X${BOOTSTRAP}" = X \
        && echo "Cannot locate ${AG}.  Giving up"
      exit 1
    fi
    echo ${AG} -L ../autoopts ${DEBUG_OPTS} opts.def
    ${AG} -L ../autoopts ${DEBUG_OPTS} opts.def
    date > stamp-opts
    ;;

  stamp-fsm )
    # Make the pseudo-macro processing Finite State Machine
    #
    if [ -z "${AG}" ]
    then
      test "X${BOOTSTRAP}" = X \
        && echo "Cannot locate ${AG}.  Giving up"
      exit 1
    fi
    echo ${AG} pseudo.def
    ${AG} pseudo.def
    date > stamp-fsm
    ;;

  stamp-exprini | \
  expr.h | \
  expr.ini )
    if [ -z "${AG}" ] || [ -z "${GD}" ]
    then
      test "X${BOOTSTRAP}" = X \
         && echo "Cannot locate autogen or getdefs.  Giving up"
      exit 1
    fi
    if ksh -c : 2> /dev/null ; then :
    else
      echo "Reconstructing expr.h and expr.ini requires ksh.  Giving up."
      exit 1
    fi
    AUTOGEN_TEMPL_DIRS=`cd $srcdir ; pwd` ; export AUTOGEN_TEMPL_DIRS
    eopt="subblock=exparg=arg_name,arg_desc,arg_optional,arg_list"
    eopt="$eopt defs=gfunc templ=snarf srcfile"
    eopt="assign=group=ag $eopt autogen=${AG} base-name=expr"
    echo ${GD} $eopt exp*.c func*.c
    ( SHELL=ksh ${GD} $eopt exp*.c func*.c 2>&1 ) > stamp-exprini
    egrep -v 'no copies of pattern' stamp-exprini || :
    date > stamp-exprini
    ;;

  expr.def )
    if [ -z "${GD}" ]
    then
      test "X${BOOTSTRAP}" = X \
         && echo "Cannot locate autogen or getdefs.  Giving up"
      exit 1
    fi
    eopt="subblock=exparg=arg_name,arg_desc,arg_optional,arg_list"
    eopt="assign=group=ag $eopt defs=gfunc templ=snarf srcfile"
    SHELL=ksh ${GD} $eopt out=expr.def exp*.c func*.c
    ;;

  stamp-functions | \
  functions.h )
    if [ -z "${AG}" ] || [ -z "${GD}" ]
    then
      test "X${BOOTSTRAP}" = X \
         && echo "Cannot locate autogen or getdefs.  Giving up"
      exit 1
    fi
    AUTOGEN_TEMPL_DIRS=`cd $srcdir ; pwd`
    eopt="template=functions defs=macfunc linenum srcfile filelist"
    eopt="$eopt autogen=${AG} base-name=functions"
    echo ${GD} $eopt func*.c
    ${GD} $eopt func*.c
    date > stamp-functions
    ;;

  stamp-directive | \
  directive.h )
    if [ -z "${AG}" ] || [ -z "${GD}" ]
    then
      test "X${BOOTSTRAP}" = X \
         && echo "Cannot locate autogen or getdefs.  Giving up"
      exit 1
    fi
    AUTOGEN_TEMPL_DIRS=`cd $srcdir ; pwd`
    eopt="template=directive autogen=${AG} base-name=directive"
    echo ${GD} $eopt ${top_srcdir}/agen5/defDirect.c
    ${GD} $eopt defDirect.c
    date > stamp-directive
    ;;

  autogen.texi | autogen.menu )
    # Construct the info doc
    #
    if [ -z "${AG}" ] || [ -z "${GD}" ]
    then
      test "X${BOOTSTRAP}" = X \
         && echo "Cannot locate autogen or getdefs.  Giving up"
      exit 1
    fi
    eopt="-L${top_srcdir}/autoopts -Taginfo -DLEVEL=chapter ${DEBUG_OPTS}"
    echo ${AG} ${eopt} -bautogen opts.def
    ${AG} ${eopt} -bautogen opts.def
    ;;

  autogen.1 )
    # Construct the man page
    #
    if [ -z "${AG}" ]
    then
      test "X${BOOTSTRAP}" = X \
         && echo "Cannot locate autogen.  Giving up"
      exit 1
    fi
    eopt="-L ${top_srcdir}/autoopts -Tagman1 -bautogen"
    echo ${AG} ${eopt} ./opts.def
    ${AG} ${eopt} ./opts.def
    ;;

  proto.h )
    ( cat <<-	_EOF_
	/*
	 * AutoGen Globally exported prototypes `date`
	 */
	#ifndef AUTOGEN_PROTOTYPES_H
	#define AUTOGEN_PROTOTYPES_H
_EOF_
    for f in `egrep -l '^    EXPORT' *.c`
    do
      echo
      echo "/* exports from $f */"
      echo
      sed -n '/^    EXPORT/,/)$/p' $f | \
        sed -e 's/^    EXPORT *//' -e 's/)$/);/'
    done
    echo
    echo "#endif /* AUTOGEN_PROTOTYPES_H */"
    ) > proto.h.new

    if test ! -f proto.h
    then mv -f proto.h.new proto.h
    elif cmp proto.h proto.h.new
    then rm -f proto.h.new
    else mv -f proto.h.new proto.h ; fi

    chmod 444 proto.h
    ;;

  * )
    echo "Don't know how to make $t"
    exit 1
    ;;
  esac
done

#  IF we symlinked in columns or getdefs,
#  THEN it is time to unlink them
#
if [ ! -z "$rmlist" ]
then rm -f $rmlist ; fi

# Local Variables:
# mode:shell-script
# sh-indentation:4
# End:

# bootstrap.dir ends here
