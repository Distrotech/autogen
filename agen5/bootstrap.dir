#! /bin/sh
#
# ----------------------------------------------------------------------
# agen5/bootstrap.dir --- maintainer's bootstrap script
#
#    AutoGen copyright (C) 1992-2002 Bruce Korb
#
# Author:            Bruce Korb <bkorb@gnu.org>
# Maintainer:        Bruce Korb <bkorb@gnu.org>
# Created:           Thu Jul 29 09:32:11 1999
# Last Modified:     $Date: 2002/09/30 03:33:20 $
#            by: bkorb
# ----------------------------------------------------------------------
# @(#) $Id: bootstrap.dir,v 3.8 2002/09/30 03:33:20 bkorb Exp $
# ----------------------------------------------------------------------

#  This script rebuilds sources not kept in the CVS repository.
#  These files are distributed, so it is not necessary to invoke
#  AutoGen before building AutoGen.  (Like I had to do long ago :)

#  "make" will invoke this file with the name of the desired output
#  as an argument.  We do this here rather than in the make file
#  because some of the rules are complex and we don't want to
#  deal with the dual update problem.

#  Dump the bootstrap recursive argument.  We're not interested.
#
if [ "$1" = recursive ]
then
    shift
fi

#  Check for a "force" option
#
if [ "$1" = "-f" ]
then force=true  ; shift
else force=false ; fi

#  Make sure we have a default for top build and source.
#  Some of the templates need this information.
#
top_srcdir=${top_srcdir:-..}
top_builddir=${top_builddir:-..}
srcdir=${srcdir:-.}
builddir=${builddir:-.}

export top_builddir top_srcdir builddir srcdir

#  disable any $HOME defaults
#
HOME=/dev/null
SHELL=/bin/sh

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# For the following to work, we must temporarily find or install
# autogen, columns and getdefs from wherever they are found:
#
rmlist=

#  Name our executable in one place and disable any $HOME defaults
#  Use the local tools, if available.  Otherwise, look for them.
#
eval "`
while read var prog dir
do
d=\`cd $dir ; pwd\`
if [ -x $d/$prog ]
then echo ${var}=$d/$prog
else
  f=\`type $prog | sed -e \"s;${prog} is [^/]*/;/;\" \`
  case ${f} in
  */${prog} )  echo ${var}=${f} ;;
  * ) echo unset ${var} ;;
  esac
fi
done <<EOF
AG  ${AGEXE-autogen}  ${builddir}
GD  ${GDEXE-getdefs}  ${builddir}/../getdefs
COL ${COLEXE-columns} ${builddir}/../columns
EOF
`"

COLUMNS_EXE="${COL}"
export COLUMNS_EXE

# # # # # # # # # # # # # # # # # # # # # # #
#
#  IF we have no remaining argument, then do everything unbuilt
#
if [ $# -eq 0 ]
then
  echo Looking in ${top_srcdir}/agen5/Makefile.am for GEN-RULE
  set -- `egrep '##.*GEN-RULE' ${top_srcdir}/agen5/Makefile.am | \
          sed 's/.*## *\(.*\) GEN-RULE/\1/' `
  if $force ; then :
  else
    t=""
    for f
    do [ ! -f $f ] && t="$t $f"
    done
    set -- $t
  fi
fi

#  Ensure complete success or a noticable failure
#
set -e

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#  FOR each output target,
#   DO the appropriate rule...
#
for t
do
  echo Re-building "$t"
  case "$t" in
  defParse.[ch] )
    #  Set a default for YACC
    #
	set +e
    if [ "x${YACC}" = x ]
    then
      f="`type byacc 2>/dev/null`"

      case "${f}" in
      "byacc is "* )
        YACC="byacc -d"
        ;;

      * )
        f="`type yacc 2>/dev/null`"

        case "${f}" in
        "yacc is "* )
          YACC="yacc -d"
          ;;

        * )
          echo "NO WORKABLE yacc"
          exit 1
          ;;
        esac
        ;;
      esac
    fi

    echo YACC: ${YACC} defParse.y
    ${YACC} defParse.y
    rm -f defParse.c defParse.h
    if test -f y.out.c; then
      mv -f y.out.c defParse.c
      mv -f y.out.h defParse.h
    elif test -f y.tab.c; then
      mv -f y.tab.c defParse.c
      mv -f y.tab.h defParse.h
    elif test -f y_tab.c; then
      mv -f y_tab.c defParse.c
      mv -f y_tab.h defParse.h
    fi
	set -e
    ;;

  stamp-opts | \
  opts.[ch] )
    # Make the option processing files:
    #
    if [ -z "${AG}" ]
    then
      echo "Cannot locate ${AG}"
      $force && exit 1
      continue
   fi
    echo ${AG} -L ../autoopts opts.def
    ${AG} -L ../autoopts opts.def
    date > stamp-opts
    ;;

  stamp-fsm )
    # Make the pseudo-macro processing Finite State Machine
    #
    if [ -z "${AG}" ]
    then
      echo "Cannot locate ${AG}"
      $force && exit 1
      continue
    fi

    echo ${AG} pseudo.def
    ${AG} pseudo.def
    ${AG} cgi.def
    rm -f .fsm.*
    date > stamp-fsm
    ;;

  stamp-exprini | \
  expr.h | \
  expr.def | \
  expr.ini )
    if [ -z "${AG}" ] || [ -z "${GD}" ]
    then
      echo "Cannot locate autogen or getdefs"
      $force && exit 1
      continue
    fi

    if ksh -c : 2> /dev/null ; then :
    else
      echo "Reconstructing expr.h and expr.ini requires ksh."
      $force && exit 1
      continue
    fi

    #  funcCase.c must be first file in list.
    #  It has the exparg attribute names.
    #
    cat > expr.cfg <<- _EOConfig_
		defs-to-get    gfunc
		template       snarf
		srcfile
		assign         two-phase=yes
		assign         group=ag
		output         expr.def
		_EOConfig_

    echo ${GD} load=expr.cfg func*.c exp*.c
    set +e
    ( SHELL=sh ${GD} load=expr.cfg func*.c exp*.c 2>&1 ) | \
	  egrep -v 'no copies of pattern' >&2
    set -e
	${AG} expr.def
    if [ "$t" = "expr.def" ]
	then : ; else rm -f expr.def ; fi
    date > stamp-exprini
    ;;

  stamp-directive | \
  directive.def | \
  directive.h )
    set -x
    if [ -z "${AG}" ] || [ -z "${GD}" ]
    then
      echo "Cannot locate autogen or getdefs"
      $force && exit 1
      continue
    fi
    cat > directive.cfg <<- _EOConfig_
		defs-to-get    directive
		template       directive
		output         directive.def
		input          ${srcdir}/defDirect.c
		srcfile
		_EOConfig_
    ${GD} load=directive.cfg ${srcdir}/defDirect.c
    ${AG} directive.def
    rm -f directive.def directive.cfg
    date > stamp-directive
    set +x
    ;;

  autogen.texi | autogen.menu )
    # Construct the info doc
    #
    if [ -z "${AG}" ] || [ -z "${GD}" ]
    then
      echo "Cannot locate autogen or getdefs"
      $force && exit 1
      continue
    fi
    eopt="-L${top_srcdir}/autoopts -Taginfo -DLEVEL=chapter"
    echo ${AG} ${eopt} -bautogen opts.def
    ${AG} ${eopt} -bautogen opts.def && touch autogen.menu autogen.texi
    ;;

  autogen.1 )
    # Construct the man page
    #
    if [ -z "${AG}" ]
    then
      echo "Cannot locate autogen"
      $force && exit 1
      continue
    fi
    eopt="-L ${top_srcdir}/autoopts -Tagman1 -bautogen"
    echo ${AG} ${eopt} ./opts.def
    ${AG} ${eopt} ./opts.def && touch autogen.1
    ;;

  proto.h )
    ( cat <<-	_EOF_
	/* -*- buffer-read-only: t -*- vi: set ro:
	 *
	 * AutoGen Globally exported prototypes `date`
	 */
	#ifndef AUTOGEN_PROTOTYPES_H
	#define AUTOGEN_PROTOTYPES_H
_EOF_
    for f in `egrep -l '^ *EXPORT' *.c`
    do
      echo
      echo "/* exports from $f */"
      echo
      sed -n '/^EXPORT /,/)$/p' $f | \
        sed 's/^EXPORT //;s/)$/);/'
    done
    echo
    echo "#endif /* AUTOGEN_PROTOTYPES_H */"
    ) > proto.h.new

    if test ! -f proto.h
    then mv -f proto.h.new proto.h
    elif cmp proto.h proto.h.new
    then rm -f proto.h.new
    else mv -f proto.h.new proto.h ; fi

    chmod 444 proto.h
    ;;

  * )
    echo "Don't know how to make $t"
    exit 1
    ;;
  esac
done

#  IF we symlinked in columns or getdefs,
#  THEN it is time to unlink them
#
if [ ! -z "$rmlist" ]
then rm -f $rmlist ; fi

# Local Variables:
# mode:shell-script
# sh-indentation:4
# indent-tabs-mode: nil
# End:

# bootstrap.dir ends here
