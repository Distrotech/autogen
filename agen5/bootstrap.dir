#! /bin/sh

#  This script rebuilds sources not kept in the CVS repository.
#  These files are distributed, so it is not necessary to invoke
#  AutoGen before building AutoGen.  (Like I had to do long ago :)

#  "make" will invoke this file with the name of the desired output
#  as an argument.  We do this here rather than in the make file
#  because some of the rules are complex and we don't want to
#  deal with the dual update problem.

#  Make sure we have a default for top build and source.
#  Some of the templates need this information.
#
if [ -z "$top_srcdir" ]
then
  top_builddir=..
  top_srcdir=..
  export top_builddir top_srcdir
fi
HOME=/dev/null

if [ -z "${DEBUG_OPTS}" ]
then
  if egrep 'define DEBUG' opts.h > /dev/null 2>&1
  then
    DEBUG_OPTS=-DDEBUG=1
    AUTOGEN_DEBUG=DEBUG=1
    export AUTOGEN_DEBUG
  else
    DEBUG_OPTS=-UDEBUG
    unset AUTOGEN_DEBUG
  fi

else
  AUTOGEN_DEBUG=`echo " ${DEBUG_OPTS}" | sed 's/ -D/ /g'`
  export AUTOGEN_DEBUG
fi

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# For the following to work, we must temporarily find or install
# columns and getdefs from wherever they are found:
#
rmlist=

#  Name our executable in one place and disable any $HOME defaults
#  Use the local ${AG}, if available.  Otherwise, look for it.
#
AG=AutoGen
if [ ! -x ${AG} ]
then
  f=`type ${AG} | sed -e "s;${AG} is ;;" `
  case ${f} in
  */AutoGen )
     AG=${f}
     ;;

  * )
    echo "Cannot locate ${AG}.  Giving up"
    exit 1
    ;;
  esac
fi

#  The "getdefs" and "columns" programs are specifically
#  called out in some of the templates (ensuring that
#  they are the ones shipped with the current package)
#
GD=../getdefs/getdefs
if [ ! -x ${GD} ]
then
  f=`type getdefs | sed "s/getdefs is //" `
  case ${f} in
  */getdefs )
     ln -s ${f} ${GD}
     rmlist="$rmlist ${GD}"
     ;;

  * )
    echo "Cannot locate ${GD}.  Giving up"
    exit 1
    ;;
  esac
fi

COLS=../columns/columns
if [ ! -x ${COLS} ]
then
  f=`type columns | sed "s/columns is //" `
  case ${f} in
  */columns )
     ln -s ${f} ${COLS}
     rmlist="$rmlist ${COLS}"
     ;;

  * )
    echo "Cannot locate ${COLS}.  Giving up"
    exit 1
    ;;
  esac
fi

# # # # # # # # # # # # # # # # # # # # # # #
#
#  Dump the bootstrap recursive argument.  We're not interested.
#
if [ "$1" = recursive ]
then
  shift
fi

#  IF we have no remaining argument, then do everything
#
if [ $# -eq 0 ]
then
  echo Looking in ${top_srcdir}/agen5/Makefile.am for GEN-RULE
  set -- `egrep '##.*GEN-RULE' ${top_srcdir}/agen5/Makefile.am | \
          sed 's/.*## *\(.*\) GEN-RULE/\1/' `
  echo building $*
fi

#  Ensure complete success or a noticable failure
#
set -e

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#  FOR each output target,
#   DO the appropriate rule...
#
for t
do
  case "$t" in
  defParse.[ch] )
    #  Set a default for YACC
    #
    if [ -z "${YACC}" ]
    then
      YACC="byacc -d"
    fi

    echo ${YACC} defParse.y
    ${YACC} defParse.y
    rm -f defParse.c defParse.h
    if test -f y.out.c; then
      mv -f y.out.c defParse.c
      mv -f y.out.h defParse.h
    elif test -f y.tab.c; then
      mv -f y.tab.c defParse.c
      mv -f y.tab.h defParse.h
    elif test -f y_tab.c; then
      mv -f y_tab.c defParse.c
      mv -f y_tab.h defParse.h
    fi
    ;;

  stamp-opts | \
  opts.[ch] )
    # Make the option processing files:
    #
    echo ${AG} -L ../autoopts ${DEBUG_OPTS} opts.def
    ${AG} -L ../autoopts ${DEBUG_OPTS} opts.def
    date > stamp-opts
    ;;

  stamp-exprini | \
  expr.h | \
  expr.ini )
    eopt="subblock=exparg=arg_name,arg_desc,arg_optional,arg_list"
    eopt="$eopt defs=gfunc templ=snarf srcfile"
    eopt="assign=group=ag $eopt autogen=${AG} base-name=expr"
    echo ${GD} $eopt exp*.c func*.c
    ( SHELL=ksh ${GD} $eopt exp*.c func*.c 2>&1 
    ) | egrep -v 'no copies of pattern'
    date > stamp-exprini
    ;;

  stamp-functions | \
  functions.h )
    eopt="template=functions defs=macfunc linenum srcfile filelist"
    eopt="$eopt autogen=${AG} base-name=functions"
    echo ${GD} $eopt func*.c
    ${GD} $eopt func*.c
    date > stamp-functions
    ;;

  stamp-directive | \
  directive.h )
    eopt="template=directive autogen=${AG} base-name=directive"
    echo ${GD} $eopt ${top_srcdir}/agen5/defDirect.c
    ${GD} $eopt defDirect.c
    date > stamp-directive
    ;;

  autogen.texi | autogen.menu )
    # Construct the info doc
    #
    eopt="-L${top_srcdir}/autoopts -Taginfo -DLEVEL=chapter ${DEBUG_OPTS}"
    echo ${AG} ${eopt} -bautogen opts.def
    ${AG} ${eopt} -bautogen opts.def
    ;;

  autogen.1 )
    # Construct the man page
    #
    eopt="-L ${top_srcdir}/autoopts -Tagman1 -bautogen"
    echo ${AG} ${eopt} ./opts.def
    ${AG} ${eopt} ./opts.def
    ;;

  proto.h )
    rm -f proto.h
    ( cat <<-	_EOF_
	/*
	 * AutoGen Globally exported prototypes
	 */
	#ifndef AUTOGEN_PROTOTYPES_H
	#define AUTOGEN_PROTOTYPES_H
_EOF_
    for f in `egrep -l '^    EXPORT' *.c`
    do
      echo
      echo "/* exports from $f */"
      echo
      sed -n '/^    EXPORT/,/)$/p' $f | \
        sed -e 's/^    EXPORT *//' -e 's/)$/);/'
    done
    echo
    echo "#endif /* AUTOGEN_PROTOTYPES_H */"
    ) > proto.h
    chmod 444 proto.h
    ;;

  * )
    echo "Don't know how to make $t"
    exit 1
    ;;
  esac
done

#  IF we symlinked in columns or getdefs,
#  THEN it is time to unlink them
#
if [ ! -z "$rmlist" ]
then rm -f $rmlist ; fi
