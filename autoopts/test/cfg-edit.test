#! /bin/sh
#  -*- Mode: Shell-script -*-
# ----------------------------------------------------------------------
# rc.test ---  test loading and saving of rc files
#
# Time-stamp:        "2008-07-27 15:02:34 bkorb"
# Author:            Bruce Korb <bkorb@gnu.org>
##
##  This file is part of AutoOpts, a companion to AutoGen.
##  AutoOpts is free software.
##  AutoOpts is copyright (c) 1992-2008 by Bruce Korb - all rights reserved
##
##  AutoOpts is available under any one of two licenses.  The license
##  in use must be one of these two and the choice is under the control
##  of the user of the license.
##
##   The GNU Lesser General Public License, version 3 or later
##      See the files "COPYING.lgplv3" and "COPYING.gplv3"
##
##   The Modified Berkeley Software Distribution License
##      See the file "COPYING.mbsd"
##
##  These files have the following md5sums:
##
##  239588c55c22c60ffe159946a760a33e pkg/libopts/COPYING.gplv3
##  fa82ca978890795162346e661b47161a pkg/libopts/COPYING.lgplv3
##  66a5cedaf62c4b2637025f049f9b826f pkg/libopts/COPYING.mbsd
#
# $Id: cfg-edit.test,v 4.1 2008/07/28 02:18:55 bkorb Exp $
# ----------------------------------------------------------------------
. ./defs

# # # # # # # # # # DEFINITIONS FILE # # # # # # # # #

test -d ${testname}.d || mkdir -p ${testname}.d
test_name=`echo ${testname} | sed 's/-/_/g'`

exec 5> ${testname}.def
cat >&5 <<- _EOF_

	AutoGen definitions options;

	config-header = 'config.h';
	prog-name  = "test_${testname}";
	prog-title = "Test AutoOpts for ${testname}";
	homerc     = ${testname}.d/${testname}.cfg;
	resettable;
	argument   = '[ <output-config-file> ]';

	flag = {
	    name = struct;
	    value = s;
	    max = NOLIMIT;
	    descrip = 'structured argument val';
	    arg-type = nested;
	};

	flag = {
	    name = members;
	    value = m;
	    descrip = 'membership set';
	    keyword = one, two, three, four, five, six, seven, eight, nine, ten;
	    arg-default = five;
	    arg-type = set;
	};

	main = {
	    main-type = main;
	_EOF_

echo '    main-text = <''<- _EOCode_' >&5
cat >&5 <<- _EOF_
	    {
	        tOptions * const pOpts = &test_${test_name}Options;
	        int svix = pOpts->specOptIdx.save_opts;
	        tOptDesc * pOD = pOpts->pOptDesc + pOpts->specOptIdx.save_opts;
	        char const * pzFile = "${testname}-save.cfg";

	        if (argc > 0)
	            pzFile = *argv;
	        if (svix == 0) exit(1);
	        pOD->optArg.argString = pzFile;
	        optionSaveFile(pOpts);
	    }
	_EOF_

echo "_EOCode_; };" >&5

exec 5>&-

# # # # # # # # # # CREATE PROGRAM # # # # # # # # #

echo ${AG_L} ${testname}.def
${AG_L} ${testname}.def || \
  failure AutoGen could not process

compile "-?"

# # # # # # # # # # HELP OUTPUT FILE # # # # # # # # #

basehelp=${testname}-base.help
echo creating ${basehelp}
cat > ${basehelp} <<_EOF_
test_${testname} - Test AutoOpts for ${testname}
USAGE:  ${testname} [ -<flag> [<val>] ]... [ <output-config-file> ]
  Flg Arg Option-Name    Description
   -s Cpx struct         structured argument val
				- may appear multiple times
   -m Mbr members        membership set
				- is a set membership option
   -R Str reset-option   Reset an option's state
   -? no  help           Display usage information and exit
   -! no  more-help      Extended usage information passed thru pager
   -> opt save-opts      Save the option state to a config file
   -< Str load-opts      Load options from a config file
				- disabled as --no-load-opts
				- may appear multiple times


The following option preset mechanisms are supported:
 - reading file ${testname}.d/${testname}.cfg

The valid "members" option keywords are:
  one two three four five six seven eight nine ten
  or an integer mask with any of the lower 10 bits set
or you may use a numeric representation.  Preceding these with a '!' will
clear the bits, specifying 'none' will clear all bits, and 'all' will set them
all.  Multiple entries may be passed as an option argument list.
_EOF_

cmp -s ${basehelp} ${testname}.help || \
  failure "`diff ${basehelp} ${testname}.help`"

./${testname} -m 'one + three + five + seven' '->'

# # # # # # # # # # TEST OPERATION # # # # # # # # # #

cleanup

## Local Variables:
## mode: shell-script
## indent-tabs-mode: nil
## sh-indentation: 2
## End:

# end of cfg-edit.test
