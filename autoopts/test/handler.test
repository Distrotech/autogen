#! /bin/sh
#  -*- Mode: Shell-script -*-
# ----------------------------------------------------------------------
# handler.test ---   test option handling
#                    make sure that when it is not specified
#                    then option processing consumes all args.
#
# Author:            Bruce Korb <bkorb@gnu.org>
# Maintainer:        Bruce Korb <bkorb@gnu.org>
# Created:           Fri Oct 1 10:27:31 PDT 1999
# Last Modified:     $Date: 2004/01/14 02:41:16 $
#            by: bkorb
#
# $Id: handler.test,v 3.4 2004/01/14 02:41:16 bkorb Exp $
# ----------------------------------------------------------------------

# Common definitions
if test -z "$srcdir"; then
    srcdir=`echo "$0" | sed 's,[^/]*$,,'`
    test -z "$srcdir" && srcdir=.
    test "$srcdir" = "$0" && srcdir=.
    test "${VERBOSE+set}" != set && VERBOSE=1
fi
. $srcdir/defs
set -x

# # # # # # # # # # DEFINITIONS FILE # # # # # # # # #

echo "creating ${testname}.def in `pwd`"
cat > ${testname}.def <<_EOF_
AutoGen Definitions options;
prog-name = ${testname};
prog-title = "Testing ${testname}";

flag = {
    name = first;
    descrip = "first description";
    extract_code;
};

flag = {
    name = second;
    descrip = "second description";
    arg_type = keyword;
    keyword = alpha, beta, gamma, omega;
};

flag = {
    name = third;
    descrip = "third description";
    flag_code = "    SomeCodeOrOther();";
};

flag = {
    name = fourth;
    descrip = "fourth description";
    arg_type = keyword;
    keyword = alpha, beta, gamma, omega;
    arg-default = gamma;
    arg-optional;
};

flag = {
    name = fifth;
    descrip = "fifth description";
    flag_proc = first;
};

flag = {
    name = sixth;
    descrip = "sixth description";
    arg_type = set-member;
    keyword = alpha, beta, gamma, omega;
    arg-default = gamma, beta;
};
_EOF_

echo $AGEN ${testname}.def
$AGEN ${testname}.def || \
  failure AutoGen could not process

sed '/START =/a\
SampleCode();\
XXX-REMOVE-XXX' ${testname}.c > ${testname}.tmp
chmod 644 ${testname}.c
sed '/^XXX-REMOVE-XXX$/d;s/XXX-REMOVE-XXX//' ${testname}.tmp > ${testname}.c

$AGEN ${testname}.def || \
  failure AutoGen could not process

sed '1,/Create the static procedure(s) declared above/d' \
    ${testname}.c > ${testname}.test

# # # # # # # # # # SAMPLE OUTPUT FILE # # # # # # # # #

echo creating ${testname}.sample
cat > ${testname}.sample <<'_EOF_'
 */
static void
doUsageOpt(
    tOptions*   pOptions,
    tOptDesc*   pOptDesc )
{
    USAGE( EXIT_SUCCESS );
}

/* * * * * * *
 *
 *   For the "First Option".
 */
static void
doOptFirst(
    tOptions*   pOptions,
    tOptDesc*   pOptDesc )
{
/*  START =-= First Opt Code =-= DO NOT CHANGE THIS COMMENT */
SampleCode();
/*  END   =-= First Opt Code =-= DO NOT CHANGE THIS COMMENT */
}

/* * * * * * *
 *
 *   For the "Second Option".
 */
static void
doOptSecond(
    tOptions*   pOptions,
    tOptDesc*   pOptDesc )
{
    tSCC zDef[2] = { 0x7F, 0 };
    tSCC* azNames[] = { zDef,
        "alpha",  "beta",   "gamma",  "omega"
    };

    pOptDesc->pzLastArg =
        optionEnumerationVal( pOptions, pOptDesc, azNames, 5 );
}

/* * * * * * *
 *
 *   For the "Third Option".
 */
static void
doOptThird(
    tOptions*   pOptions,
    tOptDesc*   pOptDesc )
{
    SomeCodeOrOther();
}

/* * * * * * *
 *
 *   For the "Fourth Option".
 */
static void
doOptFourth(
    tOptions*   pOptions,
    tOptDesc*   pOptDesc )
{
    tSCC* azNames[] = {
        "alpha",  "beta",   "gamma",  "omega"
    };

    if (((tUL)pOptions > 0x0FUL) && (pOptDesc->pzLastArg == NULL))
        pOptDesc->pzLastArg = (char*)FOURTH_GAMMA;
    else
    pOptDesc->pzLastArg =
        optionEnumerationVal( pOptions, pOptDesc, azNames, 4 );
}

/* * * * * * *
 *
 *   For the "Sixth Option".
 */
static void
doOptSixth(
    tOptions*   pOptions,
    tOptDesc*   pOptDesc )
{
    tSCC* azNames[] = {
        "alpha",  "beta",   "gamma",  "omega"
    };
    optionSetMembers( pOptions, pOptDesc, azNames, 4 );
}


#if ENABLE_NLS
#include <string.h>
#include <stdio.h>
#include <usage-txt.h>

static char*
AO_strdup( const char* pz )
{
    char* pzRes;
    if (pz == NULL)
        return NULL;
    pzRes = strdup( pz );
    if (pzRes == NULL) {
        fputs( _("No memory for duping translated strings\n"), stderr );
        exit( EXIT_FAILURE );
    }
    return pzRes;
}

static void
translate_option_strings( void )
{
    /*
     *  This invokes the translation code (e.g. gettext(3)).
     */
    int ix;
    tOptDesc* pOD = handlerOptions.pOptDesc;

    /*
     *  Do the translations.  This code gets compiled into the client programs.
     *  The first pointer follows the field count field.
     */
    {
        char** ppz = (char**)(void*)&(option_usage_text);

        ix  = option_usage_text.field_ct;
        do {
            ppz++;
            *ppz = AO_strdup(_(*ppz));
        } while (--ix > 0);
    }

    for (ix = handlerOptions.optCt; --ix >= 0; pOD++)  {
        pOD->pzText  = AO_strdup(_(pOD->pzText));
        pOD->pz_NAME = AO_strdup(_(pOD->pz_NAME));
        pOD->pz_Name = AO_strdup(_(pOD->pz_Name));

        pOD->pz_DisableName = AO_strdup(_(pOD->pz_DisableName));
        pOD->pz_DisablePfx  = AO_strdup(_(pOD->pz_DisablePfx));
    }
    handlerOptions.pzCopyright   = AO_strdup(_(handlerOptions.pzCopyright));
    handlerOptions.pzCopyNotice  = AO_strdup(_(handlerOptions.pzCopyNotice));
    handlerOptions.pzFullVersion = AO_strdup(_(handlerOptions.pzFullVersion));
    handlerOptions.pzUsageTitle  = AO_strdup(_(handlerOptions.pzUsageTitle));
    handlerOptions.pzExplain     = AO_strdup(_(handlerOptions.pzExplain));
    handlerOptions.pzDetail      = AO_strdup(_(handlerOptions.pzDetail));
}

#endif /* ENABLE_NLS */

#ifdef  __cplusplus
}
#endif
_EOF_

cmp -s ${testname}.test ${testname}.sample || { set +x ; \
  failure "`diff -c ${testname}.test ${testname}.sample`" ; }

cleanup
# end of handler.test
