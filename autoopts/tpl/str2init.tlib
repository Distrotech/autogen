[= AutoGen5 Template null   -*- Mode: Scheme -*-   =]
[=
(define move-output-file (exist? "base-name"))
(define base-file-name  (if move-output-file (get "base-name") (base-name)))
(define base-type-name  (string->c-name! (string-downcase base-file-name)))
(define pfx-str         "")
(define tmp-str         "")
(define idx             0)

(if move-output-file
    (out-move (string-append base-file-name "." (suffix))) )

(if (exist? "prefix")
    (set! pfx-str (string->c-name! (get "prefix")))
    (begin
       (set! idx (string-index base-type-name (string->char-set "_-^")))
       (if (number? idx)
           (set! pfx-str (substring/copy base-type-name 0 idx))
           (set! pfx-str base-type-name)
)   )  )
(define PFX-STR         (string-upcase pfx-str))
(define mask-name       (string-append base-type-name "_mask_t"))
(define enum-name       (string-append base-type-name "_enum_t"))
(define BASE-TYPE       (string-upcase base-type-name))

(if (exist? "type")     (set! enum-type (string->c-name! (get "type"))))
(define ENUM-TYPE       (if (<= (string-length enum-type) 0) ""
                            (string-upcase  (string-append "_" enum-type)) ))

(set!   enum-type       (string-downcase enum-type))
(define find-func-name  (string-append
   "find_" base-type-name "_" enum-type ))

(define cmd-count       (string-append PFX-STR "_COUNT" ENUM-TYPE))
(define enum-val-offset (if (exist? "cmd[0]") 1 0))
(define insert-undef    #t)
(define invalid-name    (if (exist? "invalid-name")
                            (string->c-name! (get "invalid-name"))
                            "invalid"))
(define INVALID-NAME    (string-upcase invalid-name))
(define max-cmd-width   0)
(define min-cmd-width   99999)
(define bit-count       (+ 1 (high-lim "cmd")))
(define undef-str (if (exist? "undef-str") (get "undef-str") "* UNDEFINED *"))

(make-tmp-dir)
(out-push-new (string-append tmp-dir "/commands"))

=][=

FOR cmd                 =][=

  (set! tmp-str (string-downcase! (string->c-name! (get "cmd"))))
  (if (= tmp-str invalid-name)
      (error (string-append "You cannot specify a cmd of " invalid-name)) )
  (set! idx (string-length tmp-str))
  (if (> idx max-cmd-width) (set! max-cmd-width idx))
  (if (< idx min-cmd-width) (set! min-cmd-width idx))
  (sprintf "%5u %s\n" (for-index) tmp-str) =][=

ENDFOR cmd              =][=

(out-pop)
(if (< max-cmd-width 8) (set! max-cmd-width 8))

                        =][=
CASE invalid-val        =][=
!E                      =][=
  (define invalid-cmd (string-append PFX-STR "_" INVALID-NAME ENUM-TYPE))
  =][=

== "~0"                 =][=
  (set! enum-val-offset 0)
  (set! insert-undef    #f)
  (define invalid-cmd (string-append PFX-STR "_" INVALID-NAME ENUM-TYPE))
  =][=

== ""                   =][=
  (set! enum-val-offset 0)
  (set! insert-undef    #f)
  (define invalid-cmd cmd-count)
  =][=

*                       =][=
  (error "if invalid-val exists, it is constrained to:
	'' (empty) or '~0'.")
  =][=

ESAC

\=]
