/* -*- Mode: Text -*- */

autogen definitions options;

export = "
\#include <stdio.h>
\#include <unistd.h>
\#include <errno.h>
\#include <limits.h>
\#include <stdlib.h>
\#include <string.h>

extern FILE* outFp;";

flag = {
    name        = output;
    value       = O;
    arg_type    = string;
    arg_name    = file;
    descrip     = "Output file in lieu of AutoGen processing";
    doc =
    "By default, the output is handed to an AutoGen for processing.\n"
    "However, you may save the definitions to a file instead.";

    flag_code = << FLAG_CODE_END
    if (strcmp( pOptDesc->pzLastArg, "-" ) == 0)
        return;

    if (freopen( pOptDesc->pzLastArg, "w", stdout ) == NULL) {
        fprintf( stderr, "Error %d (%s) opening `%s' for output",
                 errno, strerror( errno ), pOptDesc->pzLastArg );
        exit( EXIT_FAILURE );
    }
FLAG_CODE_END ;
};

#define XML2AG

#include opts.def

explain = <<-  END_EXPLAIN
	This program will convert any arbitrary XML file into equivalent
	AutoGen definitions, and invoke AutoGen.
	END_EXPLAIN ;

detail = <<-  END_DETAIL
	The template will be derived from either:
	*  the ``--override-tpl'' command line option
	*  a top level XML attribute named, "template"

	The ``base-name'' for the output will similarly be either:
	*  the ``--base-name'' command line option
	*  the base name of the .xml file
	END_DETAIL ;

prog-man-descrip = <<-  END_DETAIL
	The template will be derived from either:
	.br
	*  the \fB--override-tpl\fP command line option
	.br
	*  a top level XML attribute named, "template"
	.sp 1
	The ``base-name'' for the output will similarly be either:
	.br
	*  the \fB--base-name\fP command line option
	.br
	*  the base name of the .xml file
	END_DETAIL ;

/* end of opts.def */
