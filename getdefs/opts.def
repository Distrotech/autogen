
autogen definitions options;

/*
 *   $Id: opts.def,v 2.2 1998/09/23 20:29:11 bkorb Exp $
 */

/*
 *  Autogen copyright 1992-1998 Bruce Korb
 *
 *  Autogen is free software.
 *  You may redistribute it and/or modify it under the terms of the
 *  GNU General Public License, as published by the Free Software
 *  Foundation; either version 2, or (at your option) any later version.
 *
 *  Autogen is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Autogen.  See the file "COPYING".  If not,
 *  write to:  The Free Software Foundation, Inc.,
 *             59 Temple Place - Suite 330,
 *             Boston,  MA  02111-1307, USA.
 */

copyright = "1998";
copyright_gpl;

owner          = "Bruce Korb";
prog_name      = "getdefs";
prog_title     = "Autogen Definition Extraction Tool";

flag = {
    name      = "defs_to_get";
    flag_arg  = ":";
    descrip   = 'Regexp to look for after the "/*="';
};

flag = {
    name      = ordering;
    flag_arg; /* optional */
    disable   = no;
    enabled;
    descrip   = "Alphabatize or use named file";
};

flag = {
    name      = input;
    flag_arg  = ":";
    max       = NOLIMIT;
    min       = "1";
    stack_arg;
    default;
    descrip   = "Input file to search for defs";
};

flag = {
    name      = subblock;
    flag_arg  = ":";
    max       = NOLIMIT;
    stack_arg;
    descrip   = "subblock definition names";
};

flag = {
    name        = filelist;
    flag_arg;     /* optional */
    descrip     = "Insert source file name into each def";
};

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Definition Insertion Options:
 */
flag = {
    name        = doc_insert;
    descrip     = "Definition insertion options";
    documentation;
};

flag = {
    name      = assign;
    flag_arg  = ":";
    max       = NOLIMIT;
    stack_arg;
    descrip   = "Global assignments";
};

flag = {
    name      = common_assign;
    flag_arg  = ":";
    max       = NOLIMIT;
    stack_arg;
    descrip   = "Assignments common to all blocks";
};

flag = {
    name        = copy;
    flag_arg    = ":";
    max         = NOLIMIT;
    stack_arg;
    descrip     = "File(s) to copy into definitions";
};

flag = {
    name        = file;
    flag_arg;     /* optional */
    descrip     = "Insert source file name into each def";
};

flag = {
    name        = membership;
    flag_arg    = ':';
    descrip     = "Name of subcollection of entry types";
};

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Definition Output Disposition Options:
 */
flag = {
    name        = doc_output;
    descrip     = "Definition output disposition options:";
    documentation;
};

flag = {
    name        = output;
    equivalence = "autogen";
    flag_arg    = ":";
    descrip     = "Output file to open";
};

flag = {
    name        = "autogen";
    equivalence = "autogen";
    flag_arg;     /* optional */
    disable     = "no";
    enabled;
    descrip     = "Invoke autogen with defs";
};

flag = {
    name        = template;
    flag_arg    = ":";
    descrip     = "Template Name";
};

flag = {
    name        = agarg;
    flag_arg    = ":";
    max         = NOLIMIT;
    stack_arg;
    descrip     = "Autogen Argument";
    flags_cant  = output;
};

flag = {
    name        = base_name;
    flag_arg    = ":";
    descrip     = "Base name for output file(s)";
    flags_cant  = output;
};

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *  Clarifications
 */

explain =
"This program extracts autogen definitions from a list of source files.";

detail =
"Definitions are delimited by the patterns:\n
    `/\\*=[a-zA-Z][a-zA-Z0-9_]*[ \\t][ \\t]*[a-zA-Z][a-zA-Z0-9_]*\\n'
    `=\\*/'.\n
The first name is the entry type and the second is the entry
name.  This creates a definition of the following form:

    #line nnn \"source-file-name\"
    entry_type = {
        name = entry_name;
        ...
    };\n
The elipsis '...' is filled in by text found after the `/*=' line
and before the `=*/' line, with leading `^[^*]*\\*\\**[ \\t]*' removed
from each line (or all text if an asterisk is not found).

`ordering' is, by default, alphabetical by the entry name.
    Use, `no-ordering' if order is unimportant.
    Use `ordering' with no argument to order without case sensitivity.
    Use `ordering=file-name' if chronological order is important.
    getdefs will maintain the text content of `file-name'.
    `file-name' need not exist.

`subblock' is used to create shorthand entries for subblocks.
    For example, with `subbl=arg=argname,type', the text:
    `arg: this, char *' will then expand to:
    `arg = { argname = this; type = \"char *\" };'.

`autogen' is the default output, which is to say by default
    the output is written to a pipe that an autogen process is
    reading for definitions.  You may optionally specify a particular
    autogen program.  You may alternately specify `output=file'
    to cause the definitions to be written to a file.

`template' specifies a particular template for the definitions to use.
    If not specified, it defaults to the base-name argument.
    If that is not specified, then it tries to find a name string
    from the `defs-to-get' argument.  Failing that, it will use
    the name of the current directory.

`templ-dirs' and `base-name' are passed on to the autogen process.";
