
autogen definitions conftest.tpl;

/*
 */ author =           "Bruce Korb <bkorb@gnu.org>";
/*  Created:           Tue Nov 24 01:07:30 1998
 *  Last Modified:     $Date: 2003/05/18 17:16:35 $
 *             by: bkorb
 *  -------------------------------------------------------------------
 *  $Id: misc.def,v 3.27 2003/05/18 17:16:35 bkorb Exp $
 *  -------------------------------------------------------------------
 */
group = ag;
version = "$Revision: 3.27 $";
output-file = ag_macros.m4;

test = {
    name   = shell;
    type   = disable;
    check  = 'using shell scripts';
    action = { act-type = define; };

    action = { act-type = script;
      act-text = <<-  _EOF_
		AC_SUBST(OPTS_TESTDIR)
		    AC_SUBST(TOP_DIRLIST)
		    AC_SUBST(AGEN5_TESTS)
		    TOP_DIRLIST='$(SHELL_DIRS) $(XML2AG_DIR)'
		    OPTS_TESTDIR=test
		    AGEN5_TESTS='$(SHELL_TESTS) $(NOSHELL_TESTS)'
		_EOF_; };

    action = { no; act-type = script;
      act-text = <<-  _EOF_
		TOP_DIRLIST='$(NOSHELL_DIRS) $(XML2AG_DIR)'
		    OPTS_TESTDIR=
		    AGEN5_TESTS='$(NOSHELL_TESTS)'
		_EOF_; };

    doc = <<-  _EOF_
	AutoGen is now capable of acting as a CGI service.  In that capacity,
	it is extremely dangerous to allow text to be interpreted by a shell.
	To ensure that that cannot happen accidentally, it is best to
	completely disable subshell services by specifying, --disable-shell.
	In the default, enabled state, the "yes-subst[itution]" will enable
	the getdefs, columns and doc subdirectory builds.
	_EOF_;
};

test = {
    name   = debug;
    type   = enable;
    check  = 'wanting autogen debugging';
    action = { act-type = define; };
    /*
     *  What to do for non-default
     */
    action = { act-type = script;
      act-text = <<- _EOF_
		CPPFLAGS="-DDEBUG $CPPFLAGS"
	    CFLAGS="-g `echo $CFLAGS|sed 's%-g *%%g;s%-O[0-9]* *%%g'`"
		_EOF_; };

    doc = <<-  _EOF_
	This option will enable two debugging options for AutoGen.
	viz., --show-defs (dump out the definition tree)
	and --show-shell (print out all shell commands via `set -x')
	_EOF_;
};

#include libopts.def

test   = {
  name     = "guile";
  type     = "withlib";
  check    = "a working libguile can be found";
  code     = <<- _END_OF_CODE_
		#include <guile/gh.h>
		#include <libguile/list.h>
		int main () {
		  SCM fumble, bumble, stumble;
		  stumble = scm_cons( fumble, bumble );
		  stumble = scm_display( fumble, bumble );
		  stumble = scm_ilength( fumble );
		  stumble = scm_makstr( 1, 2 );
		  stumble = gh_eval_str( "stumble" );
		  scm_misc_error( "oops", "bad", bumble );
		  stumble = scm_num_eq_p( fumble, bumble );
		  scm_wrong_type_arg( "oops", 1, bumble );
		  return 0; }
		_END_OF_CODE_;
  run-mode   =  "link";
  code-mode  =  "all";

  config   = { cflags-arg = 'compile'; libs-arg = 'link'; };
  action = { yes; act-type = script;
             act-text = '  CPPFLAGS="${ag_save_CPPFLAGS}"' "\n"
                        '  LIBS="${ag_save_LIBS}"';
           };

  action = { no; act-type = script; asis;
             act-text = '  AC_MSG_ERROR([Cannot find working libguile])';
           };

  doc = <<- _END_OF_DOC_
		AutoGen won't work without Guile, so either the methods
		for finding the header and libraries must be provided,
		or guile-config must be found in the executable path,
		or we have to find the stuff in /usr or /usr/local.
		_END_OF_DOC_;
};

test   = {
  name     = "xml2";
  type     = "withlib";
  check    = "a working libxml2 can be found";
  code     = <<- _END_OF_CODE_
		#include <libxml/parser.h>
		#include <libxml/tree.h>

		int main () {
		xmlDocPtr p = xmlParseFile( "mumble.xml" ); }
		_END_OF_CODE_;
  config   = { cflags-arg = '--cflags'; libs-arg = '--libs'; };
  action = { yes; act-type = script;
             act-text = '    CPPFLAGS="${ag_save_CPPFLAGS}"' "\n"
                        '    LIBS="${ag_save_LIBS}"';
           };
  run-mode   =  "link";
  code-mode  =  "all";

  action   = { asis;
    act-type = script;
    act-text = 'XML2AG_DIR=xml2ag
    AC_SUBST([XML2AG_DIR])';
  };

  doc = <<- _END_OF_DOC_
		xml2ag won't work without libxml2, so either the methods
		for finding the header and libraries must be provided,
		or xml2-config must be found in the executable path.
		_END_OF_DOC_;
};

test = {
    name   = posix_sysinfo;
    type   = run;
    check  = "sysinfo(2) is POSIX";
    action = { act-type = define; };
    code   = <<- _EOF_
		#include <sys/systeminfo.h>
		int main() { char z[ 256 ];
		long sz = sysinfo( SI_SYSNAME, z, sizeof( z ));
		return (sz > 0) ? 0 : 1; }
		_EOF_;
    doc =
    "Check that the POSIX compliant sysinfo(2) call works properly.\n"
    "Linux has its own weirdo alternative.";
};

test = {
    name   = strcspn;
    type   = run;
    check  = "strcspn matches prototype and works";
    action = { act-type = define; };
    action = { no; act-type = script;
			act-text = 'COMPATOBJ="$COMPATOBJ strcspn.lo"'; };

    code   = <<-  _EOF_
		#include <string.h>
		int main (int argc, char** argv) {
		   char zRej[] = "reject";
		   char zAcc[] = "a-ok-eject";
		   return strcspn( zAcc, zRej ) - 5;
		}
		_EOF_;

    doc =
    "Not all systems have strcspn(3).  See if we need to substitute.\n"
    "To make this work, you have to do horrible things.  In one of your\n"
    "Makefile.am files, you must make an explicit rule to make this object.\n"
    "It should look like this:\n"
    "  strcspn.lo : $(top_srcdir)/compat/strcspn.c\n"
    "      $(LTCOMPILE) -o $@ -c $(top_srcdir)/compat/strcspn.c\n"
    "and you must include ``@COMPATOBJ@'' in a LIBADD somewhere and,\n"
    "finally, you must add another artificial dependency, something like:\n"
    "  makeshell.lo : genshell.c @COMPATOBJ@\n"
    "It is all pretty horrific, but I have found nothing else that works.";
};

test = {
    name   = sys_siglist;
    type   = run;
    check  = "there is a global text array sys_siglist";
    action = { act-type = define; };

    code   = <<-  _EOF_
		#include <signal.h>
		int main() {
		  const char* pz = sys_siglist[1];
		  return (pz != 0) ? 0 : 1; }
		_EOF_;

    doc =
    "Check that the POSIX compliant regular expression compiler\n"
    "is available in the POSIX specified manner, and it works.";
};

test = {
    name   = uname_syscall;
    type   = run;
    check  = "uname(2) is POSIX";
    action = { act-type = define; };
    code   = <<- _EOF_
		#include <sys/utsname.h>
		int main() { struct utsname unm;
		return uname( &unm ); }
		_EOF_;
    doc =
    "Check that the POSIX compliant uname(2) call works properly.";
};

test = {
    name   = long_long;
    type   = compile;
    check  = "long long ints";
    action = { act-type = define; };
    code   = <<- _EOF_
		long long i;
		_EOF_;
    doc =
    "See if long long works";
};

do-always = <<- _END_ALWAYS_

	# Give preference to byacc and yacc over bison.
	# bison likes alloca.  I hate alloca.  It is not portable.
	# This is a rehack of AC_PROG_YACC
	AC_CHECK_PROGS(YACC, byacc yacc 'bison -y', "$missing_dir/missing yacc")

	AC_C_INLINE
	AC_CACHE_CHECK([for static inline], [snv_cv_static_inline], [
	AC_TRY_COMPILE([static inline foo(bar) int bar; { return bar; }],
	  [return foo(0);],
	  [snv_cv_static_inline='static inline'],
	  [snv_cv_static_inline='static'])
	])
	AC_DEFINE_UNQUOTED(SNV_INLINE, ${snv_cv_static_inline},
	         [define to static or static inline])
	_END_ALWAYS_;

/* misc.def ends here */
