#! /bin/bash
#  -*- Mode: Shell-script -*-
# ----------------------------------------------------------------------
# bootstrap --- maintainer's bootstrap script
#
# Time-stamp:      "2006-09-10 11:34:12 bkorb"
# Author:          Gary V. Vaughan <gary@gnu.org>
# Maintainer:      Bruce Korb <bkorb@gnu.org>
# Created:         Thu Apr  9 00:40:23 1998
# ----------------------------------------------------------------------
# @(#) $Id: bootstrap,v 4.13 2006/09/13 14:31:09 bkorb Exp $
# ----------------------------------------------------------------------

# This script is designed to find any directories which contain a
# configure.in in script, and to run the autotools programs from each
# of those directories to make sure they are in a state ready to
# 'configure; make; make install'
#
# Often this process involves more than `libtoolize; automake; autoconf',
# so supplementary actions can be placed in a bootstrap.local script
# in the same directory as this script, and anywhere in the source tree
# in bootstrap.dir files.  The bootstrap.local script will be sourced
# twice; first with BOOTSTRAP=pre before the main part is run, and then
# again with BOOTSTRAP=post after the main part has finished.  This makes
# it possible to set up any links or temporary files required for this
# script to work before it has executed, and then remove them when it
# has finished.  The bootstrap.dir files are also sourced, in a random
# order, as they are found in the tree just before the BOOTSTRAP=post
# phase.  This allows a developer to put any peculiar bootstrap actions
# required by individual directories where they can be seen (and not
# forgotten!).
#
# In an ideal world, running this bootstrap script (including any extra
# scripts it executes) should leave a freshly checked out CVS source tree
# in the same state as a freshly unrolled tarball.  In this way, one
# no longer has to maintain generated files under source control, they
# can be generated after checkout using this bootstrap procedure.

# Code:

case `set -o` in
*posix*) set -o posix  ;;
*) exec bash $0 ${1+"$@"} ;;
esac

case "${SHELL}" in
(*[akz]sh) : ;;
(*)
  while : ; do
    SHELL=$(which bash 2>/dev/null)
    test -x "${SHELL}" && break

    SHELL=$(which ksh 2>/dev/null)
    test -x "${SHELL}" && break

    SHELL=/usr/xpg4/bin/sh
    test -x "${SHELL}" && break

    SHELL=$(which sh 2>/dev/null)
    test -x "${SHELL}" && break

    echo ${0} unable to determine which shell to use. >&2
    exit 1
  done
  ;;
esac

case "$-" in
(*x*)   setx=set\ -x dashx=-x VERBOSE=true  ;;
(*)     setx=:       dashx=   VERBOSE=false ;;
esac
export setx dashx VERBOSE

# Figure out the absolute path to the working directory.
#
wd=$(echo $0 | sed 's,/[^/]*$,,')
test -z "${wd}" && wd=.
wd=$(cd ${wd} && pwd) || exit 1

# Search for a configure.in
#
for srcdir in ${wd} ${wd}/.. .. .; do
    config_file=configure.ac
    test ! -f ${srcdir}/${config_file} || break
    config_file=configure.in
    test ! -f ${srcdir}/${config_file} || break
done
test -f "${srcdir}/${config_file}" || exit 1
export config_file srcdir
srcdir=$(cd ${srcdir} && pwd) || exit 1

#  This missing function is used in many places
#
MISSING="${wd}/missing"
export MISSING
chmod +x ${MISSING} || exit 1

set -e

#  Check for AutoGen version 5.
#
AGexe=$(type autogen 2>/dev/null | \
        sed 's@autogen is [^/]*/@/@')
case ${AGexe} in
/* )
     v=$($AGexe --version)
     case "$v" in
       *"Ver. 5."* ) : ;;
       * ) echo OUT OF DATE AutoGen: $v >&2
           exit 1 ;;
     esac
     ;;

* )
     echo AutoGen requires autogen to bootstrap >&2
     exit 1
     ;;
esac
GDexe=$(type getdefs 2>/dev/null | \
        sed 's@getdefs is [^/]*/@/@')
CLexe=$(type columns 2>/dev/null | \
        sed 's@columns is [^/]*/@/@')
export AGexe GDexe CLexe

# Source any local scripts which add to the bootstrap procedure.
# The bootstrap.local script should test the value of the BOOTSTRAP
# environment variable to see whether it should run the sections
# to be called before the main script, or afterwards.
#
BOOTSTRAP=pre
export BOOTSTRAP
( . ${wd}/bootstrap.local ${1+"$@"} ) || exit 1

# ----------------------------------------------------------------------
# Make sure all of the maintainer tools required for bootstrap are
# available on the host machine.
# ----------------------------------------------------------------------

tools="autoconf autoheader aclocal automake libtoolize"
autoconf_reqver=2.59
autoheader_reqver=2.59
aclocal_reqver=1.8
automake_reqver=1.8
libtoolize_reqver=1.5

#  A version is out-of-date if it does not compare equal to the correct
#  version and then one of its component numbers compares less
#
out_of_date()
{
    if test "X${1}" = "X${2}"
    then return 1 ; fi

    tv=$(IFS=" .";set -- ${1};echo ${1+"$@"})
    bv=$(IFS=" .";set -- ${2};echo ${1+"$@"})

    #  FOREVER...(as long as we have version number components)
    #
    while :
    do
        #  Extract the next component.  If they are not equal,
        #  then it is time to return 0 or 1.
        #
        x=$(set -- $tv;echo $1)
        y=$(set -- $bv;echo $1)
        if test "X$x" = "X$y" ; then :
        else
            set -- $( (echo $x return 0; echo $y return 1) | sort -n | sed 1q)
            shift
            eval ${1+"$@"}
        fi

        #  Shift off the first component of each.  If the base version is done
        #  then the test version is more recent, otherwise the other way
        #
        tv=$(set -- $tv;shift;echo ${1+"$@"})
        bv=$(set -- $bv;shift;echo ${1+"$@"})
        [ -z "$bv" ] && return 1
        [ -z "$tv" ] && return 0
    done
}

# Rather than give up at the first failure, set this variable to
# "exit 1", so that all the checks are performed before exiting.
DIE=:

for f in $tools
do
  v=$($f --version)
  if test $? -ne 0
  then
    ${MISSING} ${f}
    DIE="exit 1"
  else
    v=$(echo "$v" | sed 1q | sed 's/.* \([0-9]\)/\1/')
    eval reqver=\$${f}_reqver

    if out_of_date "${v}" "${reqver}"
    then
      echo ${f}-${v} is out of date \(older than ${reqver}\) >&2
      DIE="exit 1"
    fi
  fi

  eval $(echo $f | tr a-z A-Z)=$f
done

# If any of the above tests failed, abort at this point.
#
${DIE}

doit ()
{
  if test "x$1" != x: ; then
    echo "RUN:  $@"
    eval "$@" || exit 1
  fi
}

# Run through all of the required autogeneration tools in
# each directory which contains a ${config_file} file...
for i in $(find ${srcdir} -name ${config_file} -print | grep -v CVS/)
do
  # Find the top directory with respect to the current ${config_file}.
  top=$(dirname $i)
  case $i in
    /* | [A-Za-z]:\\*) ;;
    *) top=$(cd $top && pwd) ;;
  esac

  # A brief check to make sure we are not running in the wrong directory.
  #
  initfile=$(fgrep AC_CONFIG_SRCDIR $top/${config_file} | \
           sed 's,^.*(,,;s,).*$,,')
  if test -z "$initfile" -o ! -f $top/$initfile
  then
    cat <<- _EOF_
        \$initfile is \`$initfile'
        **Error**: Directory \`$top' does not look like a valid
        top-level directory.
_EOF_
    exit 1
  fi

  # Execute this in a sub-shell so we don't lose our start location.
  (
    ${setx}
    cd $top
    echo bootstrapping in ${PWD}

    # remove any stale config.cache
    doit rm -f config.cache

    # Use auxdir if set in ${config_file}.
    auxdir=${auxdir-$(fgrep CONFIG_AUX_DIR ${config_file} | \
        sed 's,^.*(,,;s,).*$,,')}
    test -n "$auxdir" || auxdir=${srcdir}
    test -d $auxdir || auxdir=.

    doit $LIBTOOLIZE    --force
    doit $ACLOCAL       -I $auxdir
    doit $AUTOHEADER
    doit $AUTOMAKE      --gnu --add-missing
    doit $AUTOCONF
  ) || exit 1
done

for f in $(
    find . -name bootstrap.dir | fgrep -v '/CVS/')
do
  ( cd $(dirname $f)
    srcdir=.
    echo running POST-bootstrap.dir in ${PWD}
    . ./bootstrap.dir recursive
  ) || exit 1
done

# Source any local scripts which add to the bootstrap procedure.
# The bootstrap.local script should test the value of the BOOTSTRAP
# environment variable to see whether it should run the sections
# to be called before the main script, or afterwards.
BOOTSTRAP=post
. ${wd}/bootstrap.local ${1+"$@"} || exit 1

# Local Variables:
# mode: shell-script
# sh-indentation: 2
# indent-tabs-mode: nil
# End:

# bootstrap ends here
